(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["freezer"] = factory();
	else
		root["freezer"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/dev/scripts/freezerdb.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/dev/scripts/freezerdb.js":
/*!**************************************!*\
  !*** ./src/dev/scripts/freezerdb.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar localMyFreezerName = 'MyFreezer';\nvar localAddFood = 'AddFood';\nvar localBasket = 'Basket';\n\nvar initialAddFood = {\n    FoodKey: -1,\n    FoodCD: '',\n    FoodCDName: '',\n    FoodName: '',\n    FoodGrp: '',\n    InputDate: new Date().convertFormatString('yyyy년 MM월 dd일'),\n    ExpiredDate: new Date().convertFormatString('yyyy년 MM월 dd일'),\n    FoodDetail: '',\n    Memo: '',\n    BasketMemo: '',\n    BasketYN: 'N'\n};\nvar initialFoodList = [];\nvar initialBasket = [];\n\nfunction createlocalFreezerDB() {\n    // setLocalStorage([]);\n}\n\nfunction checkLocalStorage() {\n    if (typeof localStorage.MyFreezer == 'undefined') {\n        alert(\"this app has problem , it will be refreshed!\");\n        // location.reload();\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfunction getLocalStorage(_key) {\n    if (checkLocalStorage()) {\n        return JSON.parse(localStorage.getItem(_key) == '' ? '[]' : localStorage.getItem(_key));\n    }\n}\n\nfunction setLocalStorage(_key, _value) {\n    if ((typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) != 'object') {\n        console.warn('values must be object');\n        return;\n    }\n\n    if (checkLocalStorage()) {\n        try {\n            localStorage.setItem(_key, JSON.stringify(_value));\n            return true;\n        } catch (e) {\n            console.warn(e);\n            return false;\n        }\n    }\n}\ncreatelocalFreezerDB.prototype.getSyncData = function () {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    return _myfreezer;\n};\n\ncreatelocalFreezerDB.prototype.insertFreezer = function (freezer) {\n\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n\n    var mainYN = _myfreezer.length == 0 ? \"Y\" : \"N\";\n\n    var isExisted = false;\n    _myfreezer.map(function (f) {\n        if (f.FreezerKey == freezer.FreezerKey && !isExisted) isExisted = true;\n    });\n\n    if (isExisted) {\n        console.warn('this freezer is already Existed');\n        return;\n    }\n\n    if (freezer == undefined) console.warn('freezer is undefined');else _myfreezer.push(_extends({}, freezer, { MainYn: mainYN, MySections: [] }));\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n};\n\ncreatelocalFreezerDB.prototype.updateFreezer = function (freezer) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n\n    _myfreezer.map(function (_freezer, i) {\n        if (_freezer.FreezerKey === freezer.FreezerKey) {\n            _myfreezer[i] = _extends({}, _myfreezer[i], {\n                FreezerName: freezer.FreezerName,\n                MainYn: freezer.MainYn\n            });\n        }\n    });\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n};\n\ncreatelocalFreezerDB.prototype.deleteFreezer = function (freezerkey) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n\n    _myfreezer.map(function (_freezer, i) {\n        if (_freezer.FreezerKey === freezerkey) {\n            _myfreezer.splice(i, 1);\n        }\n    });\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n};\n\ncreatelocalFreezerDB.prototype.getFreezer = function (freezerKey) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    if (freezerKey == undefined) {\n        var _filter_myfreezer = _myfreezer.filter(function (x) {\n            return true;\n        });\n        return _filter_myfreezer;\n    } else {\n        var _filter_myfreezer = _myfreezer.find(function (x) {\n            return x.FreezerKey == freezerKey;\n        });\n        return _filter_myfreezer;\n    }\n};\n\ncreatelocalFreezerDB.prototype.getSection = function (freezerKey, serctionKey) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    if (freezerKey == undefined || serctionKey == undefined) {\n        var _filter_mySection = _myfreezer.filter(function (x) {\n            return true;\n        });\n        return _filter_mySection;\n    } else {\n        var _mySections = _myfreezer.find(function (x) {\n            return x.FreezerKey == freezerKey;\n        }).MySections;\n        var _filter_mySection = _mySections.find(function (s) {\n            return s.SectionKey == serctionKey;\n        });\n\n        return _filter_mySection;\n    }\n};\n\ncreatelocalFreezerDB.prototype.getMainFreezer = function () {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    var _filter_myfreezer = _myfreezer.filter(function (x) {\n        return x.MainYn == \"Y\";\n    });\n    return _filter_myfreezer[0];\n};\n\ncreatelocalFreezerDB.prototype.getNewFreezerKey = function () {\n    var _myFreezer = getLocalStorage(localMyFreezerName);\n    var freezerKeys = _myFreezer.flatMap(function (f) {\n        return f.FreezerKey.substring(1, 4);\n    });\n\n    var max;\n    for (var i = 0; i < freezerKeys.length; i++) {\n        if (!max || parseInt(freezerKeys[i]) > parseInt(max)) max = freezerKeys[i];\n    }\n\n    if (max == undefined) return \"F001\";\n\n    var returnKey = parseInt(max) == -1 ? 1 : parseInt(max) + 1;\n    return \"F\" + String(returnKey).padLeft(0, 3);\n};\n\ncreatelocalFreezerDB.prototype.insertSection = function (freezerkey, section) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n\n    var isExisted = false;\n    _myfreezer.map(function (f) {\n        f.MySections.map(function (s) {\n            if (s.SectionKey == section.SectionKey && !isExisted) isExisted = true;\n        });\n    });\n\n    if (isExisted) {\n        console.warn('this section is already Existed');\n        return;\n    }\n\n    if (_myfreezer.length == 0) {\n        console.warn('freezer is not existed');\n    } else {\n        _myfreezer.map(function (freezer, i) {\n            if (freezer.FreezerKey == freezerkey) {\n                _myfreezer[i].MySections.push(_extends({}, section, { MyFoods: [] }));\n            }\n        });\n    }\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n};\n\ncreatelocalFreezerDB.prototype.updateSection = function (freezerKey, section) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    if (_myfreezer.length == 0) {\n        console.warn('freezer is not existed');\n    } else {\n        _myfreezer.map(function (freezer, i) {\n            if (freezer.FreezerKey == freezerKey) {\n                freezer.MySections.map(function (mySetion, j) {\n                    if (mySetion.SectionKey == section.SectionKey) _myfreezer[i].MySections[j] = _extends({}, _myfreezer[i].MySections[j], {\n                        SectionName: section.SectionName\n                    });\n                });\n            }\n        });\n    }\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n};\n\ncreatelocalFreezerDB.prototype.deleteSection = function (freezerKey, sectionKey) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    if (_myfreezer.length == 0) {\n        console.warn('freezer is not existed');\n    } else {\n        _myfreezer.map(function (freezer, i) {\n            if (freezer.FreezerKey == freezerKey) {\n                freezer.MySections.map(function (mySetion, j) {\n                    if (mySetion.SectionKey == sectionKey) _myfreezer[i].MySections.splice(j, 1);\n                });\n            }\n        });\n    }\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n};\n\ncreatelocalFreezerDB.prototype.getNewSectionKey = function (freezerKey) {\n    var _myFreezer = getLocalStorage(localMyFreezerName);\n    var _mySection = _myFreezer.filter(function (f) {\n        return f.FreezerKey == freezerKey;\n    })[0].MySections;\n    var sectionKeys = _mySection.flatMap(function (s) {\n        return s.SectionKey.substring(1, 5);\n    });\n\n    var max;\n    for (var i = 0; i < sectionKeys.length; i++) {\n        if (!max || parseInt(sectionKeys[i]) > parseInt(max)) max = sectionKeys[i];\n    }\n\n    if (max == undefined) return \"S0001\";\n\n    var returnKey = parseInt(max) == -1 ? 1 : parseInt(max) + 1;\n    return \"S\" + String(returnKey).padLeft(0, 4);\n};\n\ncreatelocalFreezerDB.prototype.insertMyFood = function (sectionkey, myFood, callback) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n\n    var isExisted = false;\n    _myfreezer.map(function (f) {\n        f.MySections.map(function (s) {\n            s.MyFoods.map(function (f) {\n                if (f.FoodKey == myFood.FoodKey && !isExisted) isExisted = true;\n            });\n        });\n    });\n\n    if (isExisted) {\n        console.warn('this myFood is already Existed');\n        return;\n    }\n\n    _myfreezer.map(function (freezer, i) {\n        freezer.MySections.map(function (section, j) {\n            if (section.SectionKey == sectionkey) {\n                _myfreezer[i].MySections[j].MyFoods.push(myFood);\n            }\n        });\n    });\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n\n    if (callback != undefined) {\n        callback();\n    }\n};\n\ncreatelocalFreezerDB.prototype.updateMyFood = function (myFood, callback) {\n    var myFoods = [];\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n\n    _myfreezer.map(function (freezer, i) {\n        freezer.MySections.map(function (section, j) {\n            section.MyFoods.map(function (food, k) {\n                if (myFood.FoodKey == food.FoodKey) {\n                    _myfreezer[i].MySections[j].MyFoods[k] = myFood;\n                }\n            });\n        });\n    });\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n\n    if (callback != undefined) {\n        callback();\n    }\n};\n\ncreatelocalFreezerDB.prototype.deleteMyFood = function (myFoodkey, callback) {\n    var myFoods = [];\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    _myfreezer.map(function (freezer, i) {\n        freezer.MySections.map(function (section, j) {\n            section.MyFoods.map(function (food, k) {\n                if (food.FoodKey == myFoodkey) {\n                    _myfreezer[i].MySections[j].MyFoods.splice(k, 1);\n                }\n            });\n        });\n    });\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n\n    if (callback != undefined) {\n        callback();\n    }\n};\n\ncreatelocalFreezerDB.prototype.getMyFood = function (myFoodkey) {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    var myFood = [];\n    _myfreezer.map(function (freezer, i) {\n        freezer.MySections.map(function (section, j) {\n            section.MyFoods.map(function (food, k) {\n                if (food.FoodKey == myFoodkey) myFood.push(food);\n            });\n        });\n    });\n\n    return myFood[0];\n};\n\ncreatelocalFreezerDB.prototype.getNewFoodKey = function () {\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    var myFood = [];\n    _myfreezer.map(function (freezer, i) {\n        freezer.MySections.map(function (section, j) {\n            section.MyFoods.map(function (food, k) {\n                myFood.push(food);\n            });\n        });\n    });\n\n    var max;\n    for (var i = 0; i < myFood.length; i++) {\n        if (!max || parseInt(myFood[i][\"FoodKey\"]) > parseInt(max[\"FoodKey\"])) max = myFood[i];\n    }\n\n    if (max == undefined) return 1;\n\n    var returnKey = parseInt(max[\"FoodKey\"]) == -1 ? 1 : parseInt(max[\"FoodKey\"]) + 1;\n    return returnKey;\n};\n\ncreatelocalFreezerDB.prototype.getAddFood = function () {\n    return getLocalStorage(localAddFood);\n};\n\ncreatelocalFreezerDB.prototype.setAddFood = function (_value, callback) {\n    setLocalStorage(localAddFood, _value);\n    if (callback != undefined) {\n        callback();\n    }\n    return getLocalStorage(localAddFood);\n};\n\ncreatelocalFreezerDB.prototype.initializeAddFood = function () {\n    setLocalStorage(localAddFood, initialAddFood);\n    return getLocalStorage(localAddFood);\n};\n\nfunction getBasketKey() {\n\n    var _baskets = getLocalStorage(localBasket);\n    var copybasket = [];\n    copybasket = _baskets.filter(function (basket, i) {\n        if (basket.BasketKey.toString().indexOf('N') == -1) return basket;\n    });\n\n    var max;\n    for (var i = 0; i < copybasket.length; i++) {\n        if (!max || parseInt(copybasket[i][\"BasketKey\"].replace('Y', '') == undefined ? -1 : copybasket[i][\"BasketKey\"].replace('Y', '')) > parseInt(max[\"BasketKey\"].replace('Y', ''))) max = copybasket[i];\n    }\n\n    if (max == undefined) return 'Y1';\n\n    var returnKey = parseInt(max[\"BasketKey\"].replace('Y', '')) == -1 ? 'Y1' : 'Y'.concat(parseInt(max[\"BasketKey\"].replace('Y', '')) + 1);\n    return returnKey;\n};\n\ncreatelocalFreezerDB.prototype.addBasket = function (basket, callback) {\n    var _baskets = getLocalStorage(localBasket);\n    var _basketKey = getBasketKey();\n    _baskets.push(_extends({}, basket, { BasketKey: _basketKey }));\n\n    setLocalStorage(localBasket, _baskets);\n\n    return _extends({}, basket, { BasketKey: _basketKey });\n};\n\ncreatelocalFreezerDB.prototype.getBasket = function () {\n    var _baskets = getLocalStorage(localBasket);\n    return _baskets;\n};\n\ncreatelocalFreezerDB.prototype.deleteBasket = function (basketkeyArray, callback) {\n    var _baskets = getLocalStorage(localBasket);\n\n    for (var i = _baskets.length - 1; i >= 0; i--) {\n        for (var j = 0; j < basketkeyArray.length; j++) {\n            if (_baskets[i] != undefined && _baskets[i].BasketKey == basketkeyArray[j]) {\n                _baskets.splice(i, 1);\n            }\n        }\n    }\n\n    setLocalStorage(localBasket, _baskets);\n\n    if (callback != undefined) {\n        return callback();\n    }\n};\n\ncreatelocalFreezerDB.prototype.updateBasket = function (basket, callback) {\n    var _baskets = getLocalStorage(localBasket);\n\n    _baskets.map(function (_basket, i) {\n        if (_basket.BasketKey === basket.BasketKey) {\n            _baskets[i] = _extends({}, _basket, {\n                BasketMemo: basket.BasketMemo,\n                BasketYN: basket.BasketYN,\n                FoodName: basket.FoodName\n            });\n        }\n    });\n\n    setLocalStorage(localBasket, _baskets);\n\n    if (callback != undefined) {\n        return callback();\n    }\n};\n\ncreatelocalFreezerDB.prototype.syncFromBasketToMyFreezer = function () {\n    var _baskets = getLocalStorage(localBasket);\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n\n    _myfreezer.map(function (freezer, i) {\n        freezer.MySections.map(function (section, j) {\n            section.MyFoods.map(function (food, k) {\n                _myfreezer[i].MySections[j].MyFoods[k] = _extends({}, _myfreezer[i].MySections[j].MyFoods[k], {\n                    BasketYN: 'N',\n                    BasketMemo: ''\n                });\n            });\n        });\n    });\n\n    _baskets.map(function (_basket, p) {\n        _myfreezer.map(function (freezer, i) {\n            freezer.MySections.map(function (section, j) {\n                section.MyFoods.map(function (food, k) {\n                    if (_basket.FoodKey == food.FoodKey) {\n                        _myfreezer[i].MySections[j].MyFoods[k] = _extends({}, food, {\n                            BasketYN: _basket.BasketYN,\n                            BasketMemo: _basket.BasketMemo\n                        });\n                    }\n                });\n            });\n        });\n    });\n\n    for (var i = _baskets.length - 1; i >= 0; i--) {\n        if (_baskets[i].IsNew == 'N') {\n            _baskets.splice(i, 1);\n        }\n    }\n\n    setLocalStorage(localMyFreezerName, _myfreezer);\n    setLocalStorage(localBasket, _baskets);\n};\n\ncreatelocalFreezerDB.prototype.syncFromMyFreezerToBasket = function () {\n    var _baskets = getLocalStorage(localBasket);\n    var _myfreezer = getLocalStorage(localMyFreezerName);\n    var basketkey = 0;\n    var _filteredFreezer = [];\n    _myfreezer.map(function (freezer, p) {\n        freezer.MySections.map(function (section, j) {\n            section.MyFoods.map(function (food, k) {\n                if (food.BasketYN == 'Y') _filteredFreezer.push({\n                    BasketKey: 'N'.concat(++basketkey), FoodKey: food.FoodKey, BasketYN: food.BasketYN, FoodName: food.FoodName, BasketMemo: food.BasketMemo, IsNew: 'N'\n                });\n            });\n        });\n    });\n\n    var combined = common.mergeObjectByProperty(_baskets, _filteredFreezer, 'FoodName', 'FoodKey');\n    setLocalStorage(localBasket, combined);\n    return combined;\n};(function () {\n    if (typeof localStorage.MyFreezer == 'undefined') localStorage.setItem(localMyFreezerName, initialFoodList);\n    if (typeof localStorage.AddFood == 'undefined') localStorage.setItem(localAddFood, JSON.stringify(initialAddFood));\n    if (typeof localStorage.Basket == 'undefined') localStorage.setItem(localBasket, JSON.stringify(initialBasket));\n})();\n\nmodule.exports = {\n    createlocalFreezerDB: createlocalFreezerDB\n};\n\n//   var test = new freezer.createlocalFreezerDB();\n//   test.insertFreezer({\"FreezerKey\" : \"F001\", \"FreezerName\" : \"울집냉장고\",\"MainYn\" : \"Y\"})\n//   test.insertSection('F001' , { \"SectionKey\" : \"S0001\", \"SectionName\"  : \"신선칸\"})\n//   test.insertMyFood('S0001' , { \"FoodKey\" : \"1\", \"FoodCD\" : \"100101000300000001\" , \"MasterCode\" : \"FM001\" , \"FoodCDName\" : '과자', \"FoodName\" : \"오트밀\", \"FoodGrp\" : \"FM001\",\"InputDate\" : \"20181024\", \"ExpiredDate\" : \"20191024\", \"FoodDetail\" : \"\",\"Memo\" : \"\" ,\"BasketMemo\" : \"\", \"BasketYN\" : \"N\"})\n\n//   test.updateSection({ \"SectionKey\" : \"S0001\", \"SectionName\"  : \"과자칸\"})\n//   test.updateMyFood({\"FoodKey\" : \"1\", \"FoodCD\" : \"100101000300000001\", \"FoodCDName\" : '과자', \"FoodName\" : \"과자\", \"FoodGrp\" : \"FM001\",\"InputDate\" : \"20181024\",\n//   \"ExpiredDate\" : \"20191024\", \"FoodDetail\" : \"\",\"Memo\" : \"\"})\n\n//   test.deleteFreezer('F002')\n//   test.deleteSection('S0002')\n//   test.deleteMyFood('1')\n\n//  var basket = { FoodKey : '' ,  FoodCD : '' , FoodName : '' , BasketMemo : '' , BasketKey :1 ,  IsNew : 'N'} // isNew == \"N\" ? 기존 냉장고 있는 데이터 : 장바구니 페이지에서 추가\n\n//# sourceURL=webpack://%5Bname%5D/./src/dev/scripts/freezerdb.js?");

/***/ })

/******/ });
});