(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webviewbridge"] = factory();
	else
		root["webviewbridge"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/dev/scripts/WebViewBridge.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/dev/scripts/WebViewBridge.js":
/*!******************************************!*\
  !*** ./src/dev/scripts/WebViewBridge.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\r\n * Created by Guy Blank on 3/9/17.\r\n *\r\n *  This is a sample provides an API to send & receive messages to and from the React-Native WebView (using postMessage/onMessage WebView API).\r\n *  A sample project that uses the bridge is available here https://github.com/blankg/rn-webview-bridge-sample\r\n *\r\n *  webViewBridge.send('functionToInvoke', {mydata: 'test'}, function(){console.log('success')},function(){console.log('error')});\r\n *\r\n *  The API is designed to be similar to the Cordova exec API so migration to it should be almost seamless.\r\n *  The API also provides solution to a React-Native WebView bug in iOS which causes sending consecutive postMessage calls to override each other.\r\n *\r\n *  Handling message on the React-Native side:\r\n *   <WebView\r\n *       ref={webview => { this.myWebView = webview; }}\r\n *       onMessage={this.onWebViewMessage}\r\n *  />\r\n *\r\n *  onWebViewMessage(event) {\r\n *      // post back reply as soon as possible to enable sending the next message\r\n *      this.myWebView.postMessage(event.nativeEvent.data);\r\n *\r\n *      let msgData;\r\n *      try {\r\n *          msgData = JSON.parse(event.nativeEvent.data);\r\n *      }\r\n *      catch(err) {\r\n *          console.warn(err);\r\n *          return;\r\n *      }\r\n *\r\n *      // invoke target function\r\n *      const response = this[msgData.targetFunc].apply(this, [msgData]);\r\n *      // trigger success callback\r\n *      msgData.isSuccessfull = true;\r\n *      msgData.args = [response];\r\n *      this.myWebView.postMessage(JSON.stringify(msgData))\r\n *  }\r\n * \r\n * \t\t################################################################ native > webview 쪽으로 동작 내용 ####################################################################################\r\n * \t\t****** native 에서 아래와 같이 호출 webview 쪽으로  ******\r\n *\t\t>>  funcCallWebviewPostMessage 이한수는 window.postMessage를 바인딩 해놓은것임 funcCallWebviewPostMessage 실행하면 전역적으로 window.postMessage를 호출하는거랑 같은 기능\r\n * \t\t var msg = createPostMessage('toggleRightMenu' , null );\r\n            // webView 에 함수 호출 대표 핸들러\r\n\t\t\tthis.props.funcCallWebviewPostMessage(msg);\r\n\t\t\r\n\r\n\t\t****** 웹에서 동작 하는거임 ********\r\n\r\n\t\t위의 funcCallWebviewPostMessage 로 호출한 것을 받아오는곳\r\n *      전역으로 쓸 함수 바인딩 셋팅하고 전역 이벤트를 바인딩 해둠.. native 웹에서 호출시 window 객체 안에 바인딩 되어있는 전역 함수가 실행됨\r\n        if(window._appBridge == undefined){\r\n            window._appBridge = {\r\n                //함수이름 : 함수\r\n                toggleRightMenu : this.toggleRightMenu.bind(this) , \r\n            }\r\n\t\t}\r\n\t\t################################################################ native > webview 쪽으로 동작 내용 ####################################################################################\r\n\r\n\r\n\r\n\r\n\t\t################################################################ webView > native 쪽으로 동작 내용 ####################################################################################\r\n\r\n\t\tWebViewBridge.js 에서 send 메세지 바인딩 해놓음 전역용으로..\r\n\t\t>> window.webViewBridge.send('handleFooterVisible' , 'N' , function (){ } , function (){ });\r\n\r\n\t\tWebView Component 에 이벤트 onWebViewMessage 에서  postMessage를 받게 셋팅해둠\r\n\t\thandleFooterVisible 이벤트가 일어날꺼임\r\n\t\t\r\n\t\t################################################################ webView > native 쪽으로 동작 내용 ####################################################################################\r\n *\r\n */\n(function () {\n\n\tvar promiseChain = Promise.resolve();\n\n\tvar callbacks = {};\n\n\tvar init = function init() {\n\n\t\tvar guid = function guid() {\n\t\t\tfunction s4() {\n\t\t\t\treturn Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n\t\t\t}\n\t\t\treturn s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n\t\t};\n\n\t\twindow.webViewBridge = {\n\t\t\t/**\r\n    * send message to the React-Native WebView onMessage handler\r\n    * @param targetFunc - name of the function to invoke on the React-Native side\r\n    * @param data - data to pass\r\n    * @param success - success callback\r\n    * @param error - error callback\r\n    */\n\t\t\tsend: function send(targetFunc, data, success, error) {\n\t\t\t\tvar msgObj = {\n\t\t\t\t\ttargetFunc: targetFunc,\n\t\t\t\t\tdata: data || {}\n\t\t\t\t};\n\n\t\t\t\tif (success || error) {\n\t\t\t\t\tmsgObj.msgId = guid();\n\t\t\t\t}\n\n\t\t\t\tvar msg = JSON.stringify(msgObj);\n\n\t\t\t\tpromiseChain = promiseChain.then(function () {\n\t\t\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t\t\tconsole.log(\"sending message \" + msgObj.targetFunc);\n\n\t\t\t\t\t\tif (msgObj.msgId) {\n\t\t\t\t\t\t\tcallbacks[msgObj.msgId] = {\n\t\t\t\t\t\t\t\tonsuccess: success,\n\t\t\t\t\t\t\t\tonerror: error\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconsole.log('in postmssage new!@!@!@');\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\twindow.postMessage(msg, '*');\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\talert(e);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t}).catch(function (e) {\n\t\t\t\t\tconsole.error('rnBridge send failed ' + e.message);\n\t\t\t\t});\n\t\t\t}\n\n\t\t};\n\n\t\twindow.document.addEventListener('message', function (e) {\n\t\t\tconsole.log(\"message received from react native\");\n\n\t\t\tvar message;\n\t\t\ttry {\n\t\t\t\tmessage = JSON.parse(e.data);\n\t\t\t\t// alert(message);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"failed to parse message from react-native \" + err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (window._appBridge != undefined) {\n\t\t\t\ttry {\n\t\t\t\t\twindow._appBridge[message.targetFunc].apply(null, message);\n\t\t\t\t} catch (e) {\n\t\t\t\t\talert('App 전역에서 함수를 생성하세요');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tinit();\n})();\n\n//# sourceURL=webpack://%5Bname%5D/./src/dev/scripts/WebViewBridge.js?");

/***/ })

/******/ });
});